-- this is an example of a procedure I was asked to do 





USE [TestTaskDB]
GO
/****** Object:  StoredProcedure [dbo].[sp_report_1]    Script Date: 27.06.2022 23:23:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



ALTER PROCEDURE [dbo].[sp_report_1]
	@date_from date,
	@date_to date,
	@good_group_name nvarchar(MAX)
AS
BEGIN
	declare @date_from_int int
	declare @date_to_int int
	
	set @date_from_int = (select top 1 did from dbo.dim_date where d = @date_from )
	set @date_to_int = (select top 1 did from dbo.dim_date where d = @date_to )
	
	-- 3) lets create a table and using a while loop and  poblate it with the tags separated by commas  
	CREATE TABLE #temporal (goods NVARCHAR(max));			
	WHILE LEN(@good_group_name) > 0
        BEGIN
            INSERT INTO #temporal(goods)
			SELECT left(@good_group_name, charindex(',', @good_group_name + ',') -1) as goods
			SET @good_group_name = stuff(@good_group_name, 1, charindex(',', @good_group_name + ','), '')
        END







	
	SELECT d.d as [date],
		s.store_name as [drugstore],
		g.group_name as [group] ,
		g.good_name as [good],
		[sales_units] = sum(f.quantity) over(partition by d.d,s.store_name,g.group_name,g.good_name),
		[sales_tax] = sum(f.sale_grs) over(partition by d.d,s.store_name,g.group_name,g.good_name),			
		[cost_tax] = sum(f.cost_grs) over(partition by d.d,s.store_name,g.group_name,g.good_name),			
		[avg_cost] = ((sum(f.cost_net) over(partition by d.d,s.store_name,g.group_name,g.good_name))/(0.000001+sum(f.quantity) over(partition by d.d,s.store_name,g.group_name,g.good_name))),		
		[margin] = ((avg(f.sale_net) over(partition by d.d,s.store_name,g.group_name,g.good_name))-(avg(f.cost_net) over(partition by d.d,s.store_name,g.group_name,g.good_name))),					
		[markup] = 100*((avg(f.sale_net)over(partition by d.d,s.store_name,g.group_name,g.good_name))-(avg(f.cost_net) over(partition by d.d,s.store_name,g.group_name,g.good_name)))/(avg(f.cost_net) over(partition by d.d,s.store_name,g.group_name,g.good_name) + 0.000001), 
		[percentage] = 100*(f.sale_grs)/(sum(f.sale_grs) over(partition by d.d,s.store_name,g.group_name))
	FROM [dbo].[fct_cheque] as f
	inner join dim_goods as g
		on g.good_id = f.good_id
	left join [dim_stores] as s
		on s.store_id = f.store_id
	inner join dim_date as d									
		on d.did = f.date_id
	inner join #temporal as t
		on  lower(g.group_name) = t.goods
	where date_id between @date_from_int and @date_to_int
	order by 
		d.d,
		s.store_name,
		g.group_name
END;


-- 1)  in order to check the results for the first problem: 

CREATE TABLE #prueba (date_id date, store NVARCHAR(MAX), group_id NVARCHAR(MAX), good_name NVARCHAR(MAX), sales_units DECIMAL(20,10), sales DECIMAL(20,10), cost DECIMAL(20,10), avg_cost DECIMAL(20,5), margin DECIMAL(20,5), markup DECIMAL(20,5), percentage DECIMAL(20,5)) 
INSERT INTO #prueba 
Exec [sp_report_1] '2017-06-01', '2017-06-30', N'Биологически активные добавки';

SELECT SUM(sales) FROM #prueba   
							
-- 2)  to check that the second solution works:  


Exec [sp_report_1] '2017-06-01', '2017-06-30', N'Биологически активные добавки';


-- 3)  to check that the third solution works 



Exec [sp_report_1] '2017-06-01', '2017-06-30', N'Биологически активные добавки,Лек. средства';



-- 4)  to check that the fourth solution works 

Exec [sp_report_1] '2017-06-01', '2017-06-02', N'Биологически активные добавки,Лек. средства';

